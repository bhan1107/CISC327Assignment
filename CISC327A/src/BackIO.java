//This class contains only static methods related to reading and writing to the TSF and CSF files.
//It is a "helper" class for Back.java

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public final class BackIO {
	private BackIO() {}
	
	//Reads in TSF file and stores every variable
	public static ArrayList<String> readTSF(){
		//making every single tsf into array list, if tsf is [SEL 12345 4 00000 *****]
		//then arraylist would be [sel][12345][4][00000][*****]
		ArrayList<String> tsfArray = new ArrayList<>();
		try {					
			File file = new File("./TSFolder/TSF.txt"); 
			Scanner sc = new Scanner(file);
			while (sc.hasNext()) {
				tsfArray.add(sc.next());
			}
			sc.close();
		}
		catch(Exception e) {
			System.out.println("ERROR: CANNOT READ FILE for TSF");
		}
		if(tsfArray.get(tsfArray.size()-1).equals("EOS")) {
			if(tsfArray.size() > 0){			//This is for removing EOS line
				tsfArray.remove(tsfArray.size() - 1);
			}
		}
		
		return tsfArray;
	}
	
	// Takes arraylist generated by readTSF and returns an arraylist of Transaction objects
	public static ArrayList<Transaction> makeTSFObjectArray(ArrayList<String> tsfArray){
		ArrayList<Transaction> objectArray= new ArrayList<Transaction>();
		for(int i=1; i<tsfArray.size();i+=6) {  			   
			String tsfCode = tsfArray.get(i-1);
			int tsfServiceNum = Integer.parseInt(tsfArray.get(i));
			int tsfNumTicket = Integer.parseInt(tsfArray.get(i+1));
			int tsfSecondServiceNum = Integer.parseInt(tsfArray.get(i+2));
			String tsfServiceName = tsfArray.get(i+3);
			int tsfServiceDate = Integer.parseInt(tsfArray.get(i+4));
			objectArray.add(new Transaction(tsfCode, tsfServiceNum, tsfNumTicket, tsfSecondServiceNum, tsfServiceName, tsfServiceDate));
			
		}
		return objectArray;
	}

	//making every single central service file into array list, if tsf is [SEL 12345 4 00000 *****]
	//then arraylist would be 1.[sel] 2.[12345] 3.[4] 4.[00000] 5.[*****]
	public static ArrayList<String> readCSF(){ 			
		ArrayList<String> csfArray = new ArrayList<String>();
		try {								
			File file = new File("./csf.txt"); 
			Scanner sc = new Scanner(file);  
			while (sc.hasNext()) 
				csfArray.add(sc.next());	
			sc.close();
		}
		catch(Exception e) {
			System.out.println("ERROR: CANNOT READ FILE FOR CSF");
		}

		return csfArray;
	}
	
	// Takes arraylist generated by readCSF and returns an arraylist of CentralService objects
	public static ArrayList<CentralService> makeCSFObjectArray(ArrayList<String> csfArray){
		ArrayList<CentralService> csfObjectArray= new ArrayList<CentralService>();
		// Let's say arraylist length is 10 then i = 1 then a.get(0) ~ a.get(4)
		// i = 6 then a.get(5) ~ a.get(9)
		for(int i = 1; i < csfArray.size(); i += 5) {  
			int csfServiceNum = Integer.parseInt(csfArray.get(i-1));
			int csfServiceCapacity = Integer.parseInt(csfArray.get(i));
			int csfNumTickets = Integer.parseInt(csfArray.get(i+1));
			String csfServiceName = csfArray.get(i+2);
			int csfServiceDate = Integer.parseInt(csfArray.get(i+3));
			csfObjectArray.add(new CentralService(csfServiceNum, csfServiceCapacity, csfNumTickets, csfServiceName, csfServiceDate));
			
		}
		return csfObjectArray;
	}

	//Final writer function for CSF
	public static void writeCSF(ArrayList<CentralService> CSF) throws FileNotFoundException { 
		PrintWriter outputStream = new PrintWriter("./csf.txt");					   
    	for(int i=0; i<CSF.size();i++) {	
    		outputStream.println(CSF.get(i).serviceNum + " " + CSF.get(i).serviceCapacity + " " + CSF.get(i).numTickets + " " + CSF.get(i).serviceName + " " + CSF.get(i).serviceDate); ;
 
    	}
    	outputStream.close();
	}

	//Write a new valid services file, overwrites old one if it exists
	public static void writeValidServiceFile(ArrayList<CentralService> services) {
		int CSFLinesLength = services.size();
        try {
        	PrintWriter outputStream = new PrintWriter("./validservices.txt");
            
        	for (int i = 0; i < CSFLinesLength; i++) {
        		outputStream.println(services.get(i).serviceNum);
        	}
        	outputStream.close();
        }
        catch (FileNotFoundException e) {
        	e.printStackTrace();
        }
	}
}
